/*
【组合 VS 继承】
组合和继承都是为了代码复用；
组合和继承都允许在新类中放置子对象（组合是显式的，而继承是隐式的）；
 *
当想在新类中包含一个已有类的功能时，使用组合（or 委托/半委托）。
也就是说，在新类中嵌入一个对象（通常是私有的），以实现其功能。
新类的使用者看到的是你所定义的新类的接口，而非嵌入对象的接口。
 *
当使用继承时，使用一个现有类并开发出它的新版本。
通常这意味着使用一个通用类，并为了某个特殊需求将其特殊化。
 *
这种“是一个”的关系是用继承来表达的，而“有一个“的关系则用组合来表达。
 *
在下面这个 车子 的例子中，
稍微思考下，你就会发现，
用一个交通工具对象来组成一部车是毫无意义的——车不包含交通工具，它就是交通工具。
 */

/**
 * 使用组合（也是“半委托”）
 * 实现一个 Car：
 */
class Engine {
    public void start() {}
    public void rev() {}
    public void stop() {}
}
class Wheel {
    public void inflate(int psi) {}
}
class Window {
    public void rollup() {}
    public void rolldown() {}
}
class Door {
    // 组合
    public Window window = new Window();

    public void open() {}
    public void close() {}
}
class Car {
    // 1个引擎、4个轮子、2扇门
    public Engine engine = new Engine();
    public Wheel[] wheels = new Wheel[4];
    public Door left = new Door(), right = new Door();

    public Car() {
        for (int i = 0; i < 4; i++) {
            wheels[i] = new Wheel();
        }
    }

    public static void main(String[] args) {
        Car car = new Car();
        // 在这里明确指出了 rollup() 方法是哪个类的对象调用的。（半委托的优点）
        car.left.window.rollup();
        car.wheels[0].inflate(72);
    }
}
/*
这个例子中 car 的组合也是问题分析的一部分（不是底层设计的部分），
所以声明成员为 public 有助于客户端程序员理解如何使用类，
且降低了类创建者面临的代码复杂度。
但是，记住这是一个特例。
通常来说，属性还是应该声明为 private。
 */


/*
【再论组合和继承】
1.从继承本身的角度
    “是一个”的关系是用继承来表达的，而“有一个“的关系则用组合来表达。
2.从“向上转型/多态的角度”
    一种判断使用组合还是继承的最清晰的方法是问一问自己是否需要把新类向上转型为基类。
    如果必须向上转型，那么继承就是必要的，但如果不需要，则要进一步考虑是否该采用继承。
 *
尽管在教授 OOP 的过程中我们多次强调继承，但这并不意味着要尽可能使用它。
恰恰相反，尽量少使用它，除非确实使用继承是有帮助的！
 *
（“继承”，为向上转型/多态而生）
继承最重要的方面不是为新类提供方法。它是新类与基类的一种关系。
简而言之，这种关系可以表述为“新类是已有类的一种类型”。（是 “已有类型” 的进一步扩展）
 *
如果使用继承做一个通用类，并为了某个特殊需求将其特殊化。
稍微思考，发现：用一个交通工具对象来组成一部车是毫无意义的，车不包含交通工具，它就是交通工具。
（这种情况下，相比于组合，使用继承更合理一些）
 *
（“多态”章节中将进一步进行讨论...）
 */
